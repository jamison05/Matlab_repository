classdef ScriptModIndividual
    %This will access the painter strokes as objects and then make
    %modifications of each.  
    
    %Here is where I am going to use another class to create more structure
    %for the scripts. This is important so that the scripts can be able be
    %more agile.  And I can do more with and create more interpolerative
    %effects.  ((In additino I will also have to create a class that describes
    %how each image sychronizes based on fuzzy logic ))
    
    %Personal expression will be done with neural networks. 
    properties

        opacity;
        brush_max
        brush_min
        texture_use
        scriptCellArray_brush
        scriptCellArray_strokes 
        indexEffects
         scriptCellArray 
    end
    
    properties(Dependent)
        changeValue
        program_of_patterns
        
        set_stroke_opacity
        set_gitter_opacity
        set_image_textures
       % This is the combination of both stroke and brush
       
        %These are the main properties I would to affect
     
       
        %Scripting Program will be a structure since it is complicated
        %to orient all of the objects correctly with this. 
        scriptingProgram=1;
    end
   
    methods
        function construct_brush = ScriptModIndividual(script_num, chng_val,...
            stroke_var,user_strokevar, fuzzy_var,BRUSH_max, BRUSH_min, BRUSH_opacity,...
             BRUSH_type)
            
            if nargin > 0
               
                
                
                %Initialize the stroke objectUSE
                stroke_object= stroke_Program1(stroke_var,script_num, chng_val, stroke_var,user_strokevar, fuzzy_var);%This will be the default


                %[nrows,ncols] = size(current_script);

                %pnt x  434.00 y  244.00 time 124282 prs 1.00 tlt 0.00 brg 0.00 whl 1.00 rot 0.00
                %Cat concatenates the array along the first dimension. 
            
 
                
                stroke_object.Program = 1;
                %Stroke variation, user stroke_varation, and fuzzy stroke
                %variation will be initiated by this code. 
                
                calculated_X = ones(length(stroke_object.i_touch_array_x),1);
                calculated_Y = ones(length(stroke_object.i_touch_array_y),1);
                calculated_Press = ones(length(stroke_object.i_touch_array_pressure),1);
                calculated_brush = cell(length(stroke_object.i_touch_array_pressure),1); 
                %This is only one algorithm that follows time. 
                for i = 2:length(cell2mat(stroke_object.i_touch_array_x)) 
                    calculated_X(i) = cell2mat(stroke_object.X_1array(i))*stroke_object.option_overide_percent ...
                    + cell2mat(stroke_object.i_touch_array_x(i)) * stroke_object.option_overide_percent2; 
                    
                     calculated_Y(i) = cell2mat(stroke_object.Y_1array(i))*stroke_object.option_overide_percent ...
                    + cell2mat(stroke_object.i_touch_array_y(i)) * stroke_object.option_overide_percent2; 
                     
                     calculated_Press(i)= cell2mat(stroke_object.i_touch_array_pressure(i))* ...
                     (cell2mat((stroke_object.fuzzy_pressure_array(i)))/10);
                end
                for i = 2:length(cell2mat(stroke_object.i_touch_array_x))   
                   
                    current_str = strcat('pnt x',char('-----'), num2str(calculated_X(i)),char('-----'), 'y', ...
                    char('-----'), num2str(calculated_Y(i)),char('-----'),'time ',char('-----'),...
                    num2str(cell2mat(stroke_object.i_touch_time(i))),...
                    char('-----'), 'prs',char('-----'), num2str(calculated_Press(i)),char('-----'), ...
                    ' tlt   0.00   brg   0.00   whl   1.00   rot   0.00');
                    %This is a bug I have to fix that requires extra memory
                    n2dimension= size(current_str);
                    updatedString = regexprep(current_str, '-----', '      ');
                    calculated_brush(i)= cell({updatedString}); 
                end
                    %Important closing is always important.
                    calculated_brush(length(cell2mat(stroke_object.i_touch_array_x)))=cell({char('stroke_end')});
                    calculated_brush(1)=cell({char('stroke_start')});
                    construct_brush.scriptCellArray_strokes = calculated_brush;
                    current_script = getScript(script_num);
                    construct_brush.scriptCellArray_brush = current_script;
                    
                  
                    
                    if (chng_val==3)
                        result = cat(1,current_script,calculated_brush);
                        construct_brush.scriptCellArray = result;

                        construct_brush.opacity = BRUSH_opacity;
                        construct_brush.brush_max = BRUSH_max;
                        construct_brush.brush_min = BRUSH_min;
                        construct_brush.changeValue = BRUSH_type;   
                    end
                end      
        end
           
                    %the changeValue will ge called outside and then the objects 
                    %will go ino 
           
                    %pnt x  434.00 y  244.00 time 124282 prs 1.00 tlt 0.00 brg 0.00 whl 1.00 rot 0.00
                    %First one the Fuzzy logic inference to get values.  
                    %3, 6, 7, 8, 10, 12,13,15, 19, 20, 23, 27,29
                     %This activates all of the changes that will affect
                     %the brush based pn the brush selection sent to the
                     %constructor.
                     
                     %Operations will be performed on the calling function 
                     %In future iterations of modifying the code I will set
                     %will make setter functions to calculate the values
                     %especially as it gets more intricate. 
                 
        function obj = set.changeValue(obj,status)
               
                switch status
                    case 0
                     %no action te value does not change
                    case 3
                     %Item 3
                     obj.indexEffects = getbrushPropertyLocations(3);
                     %Replaces the value with another value
                     obj.set_stroke_opacity =1;  
                    case 6
                     obj.indexEffects = getbrushPropertyLocations(6);
                     %Replaces the value with another value
                     obj.set_gitter_opacity =1;  
                    case 7
                     obj.indexEffects = getbrushPropertyLocations(7);
                     %Replaces the value with another value
                     obj.set_gitter_opacity =1; 
                    case 8
                     obj.indexEffects = getbrushPropertyLocations(8);
                     %Replaces the value with another value
                     obj.set_gitter_opacity =1; 
                    case 10    
                     obj.indexEffects = getbrushPropertyLocations(10);
                     %Replaces the value with another value
                     obj.set_gitter_opacity =1; 
                    case 12    
                     obj.indexEffects = getbrushPropertyLocations(12);
                     %Replaces the value with another value
                     obj.set_gitter_opacity =1; 
                    case 13    
                     obj.indexEffects = getbrushPropertyLocations(13);
                     %Replaces the value with another value
                     obj.set_gitter_opacity =1;
                    case 15    
                     obj.indexEffects = getbrushPropertyLocations(15);
                     %Replaces the value with another value
                     obj.set_gitter_opacity =1;
                    case 19    
                     obj.indexEffects = getbrushPropertyLocations(19);
                     %Replaces the value with another value
                     obj.set_gitter_opacity =1;
                    case 20    
                     obj.indexEffects = getbrushPropertyLocations(20);
                     %Replaces the value with another value
                     obj.set_gitter_opacity =1; 
                    case 23    
                     obj.indexEffects = getbrushPropertyLocations(23);
                     %Replaces the value with another value
                     obj.set_gitter_opacity =1;
                    case 27    
                     obj.indexEffects = getbrushPropertyLocations(27);
                     %Replaces the value with another value
                     obj.set_gitter_opacity =1;
                    case 29    
                     obj.indexEffects = getbrushPropertyLocations(29);
                     %Replaces the value with another value
                     obj.set_gitter_opacity =1;  
                end    
                 result = cat(1,obj.scriptCellArray_brush,  obj.scriptCellArray_strokes);
                 obj.scriptCellArray = result;

        end
        function obj = set.scriptCellArray(obj,init)
            obj.scriptCellArray= init;
        end   
        function obj = set.scriptCellArray_strokes(obj,init)
            obj.scriptCellArray_strokes= init;
        end   
        function obj = set.scriptCellArray_brush(obj,init)
            obj.scriptCellArray_brush = init;
        end   
%         set_stroke_opacity
%         set_gitter_opacity
%         set_image_textures 
        function obj = set.set_stroke_opacity(obj,init)
              
                 value1 = strcat('stroke_opacity', '-----',num2str(obj.opacity));
                 %This value will be modified within the object as it
                 %progresses.  
                 updatedString = regexprep(value1, '-----', '    ');
                 k = obj.indexEffects;
                 obj.scriptCellArray_brush(k(1)) = mat2cell((updatedString),1);      

                 value1 = strcat('max_size_slider', '-----',num2str(obj.brush_max));
                 %This value will be modified within the object as it
                 %progresses.  
                 updatedString = regexprep(value1, '-----', '    ');
                 obj.scriptCellArray_brush(k(2)) = mat2cell((updatedString),1);;  

                 value1 = strcat('min_radius_fraction_slider', '-----',num2str(obj.brush_min));
                 %This value will be modified within the object as it
                 %progresses.  
                 updatedString = regexprep(value1, '-----', '    ');
                 obj.scriptCellArray_brush(k(3)) = mat2cell((updatedString),1);
            end 
            function obj = set.set_gitter_opacity(obj,init)
             
                 k = obj.indexEffects; 
                 value1 = strcat('glazing_opacity_jitter', '-----',num2str(obj.opacity));
                 %This value will be modified within the object as it
                 %progresses.   
                 updatedString = regexprep(value1, '-----', '    ');
                 obj.scriptCellArray_brush(k(1)) = mat2cell((updatedString),1);;      
                 
                 value1 = strcat('max_size_slider', '-----',num2str(obj.brush_max));
                 %This value will be modified within the object as it
                 %progresses.  
                 updatedString = regexprep(value1, '-----', '    ');
                 obj.scriptCellArray_brush(k(2)) = mat2cell((updatedString),1);;  
                 
                 value1 = strcat('min_radius_fraction_slider', '-----',num2str(obj.brush_min));
                 %This value will be modified within the object as it
                 %progresses.  
                 updatedString = regexprep(value1, '-----', '    ');
                 obj.scriptCellArray_brush(k(3)) = mat2cell((updatedString),1);
               
            end 
            function obj = set.set_image_textures (obj,init)
                    %obj.set_image_textures =init;
            end 
        
    end

end
